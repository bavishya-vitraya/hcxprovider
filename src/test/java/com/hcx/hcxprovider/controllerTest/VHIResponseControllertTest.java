package com.hcx.hcxprovider.controllerTest;

import com.hcx.hcxprovider.configuration.InvalidUserAuthEntryPoint;
import com.hcx.hcxprovider.configuration.SecurityFilter;
import com.hcx.hcxprovider.controllers.VHIRequestController;
import com.hcx.hcxprovider.controllers.VHIResponseController;
import com.hcx.hcxprovider.service.PreAuthService;
import com.hcx.hcxprovider.service.impl.UserServiceImpl;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.hamcrest.core.StringContains.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(SpringExtension.class)
@WebMvcTest(VHIResponseController.class)
@AutoConfigureMockMvc(addFilters = false)
public class VHIResponseControllertTest {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private  PreAuthService preAuthService;

    @MockBean
    private SecurityFilter securityFilter;

    @MockBean
    private BCryptPasswordEncoder passwordEncoder;

    @MockBean
    private InvalidUserAuthEntryPoint authenticationEntryPoint;

    @MockBean
    private UserServiceImpl userServiceImpl;


    @Test
   public void savePreAuthResponseTest() throws Exception {

        String preAuth="eyJ4LWhjeC1yZWNpcGllbnRfY29kZSI6IjEtYmRhZjQ4NzItZDQxZi00ZDllLTlkMjMtZmJlNzNjYTk4NGY4IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0xMS0yNlQxMTo1Nzo1MCswNTMwIiwieC1oY3gtc2VuZGVyX2NvZGUiOiIxLTQzNGQ3OWY2LWFhZDgtNDhiYy1iNDA4LTk4MGE0ZGJkOTBlMiIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiNmEwYTMyYWEtMTkxYS00MmQ2LTlmYjItNzU4NzJlNzI1Yjg1IiwiZW5jIjoiQTI1NkdDTSIsImFsZyI6IlJTQS1PQUVQLTI1NiIsIngtaGN4LWFwaV9jYWxsX2lkIjoiMTM3YWZjNjItMjc2Yi00MjZjLWFmOTctYjQyYjVlMGFiNDliIiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UucGFydGlhbCJ9.HynP1SeXcsxsR_iX1DKKYo6HYzKuPr9NlQ4eBdATvNzRugLh1eUXcIRu_07G_bEQlL6xaZ7uMnV2cQie6Uh77wtnvcQr9hXuH_KvBXL19I8IlxAHKE9UgJFCd4oHu2o8JnMKvl3e7ldIcBX9j_J44VME0qcnRwLth2XzCYU9iooXKGztkZ5YmF_JAdUoJ2ReXVb40D4eNTaPeaKUfB34g8tgEKcrBRIEMViB4ZWrbmJs_R1U8D5Qt_6i3Ec_fBAdwL30j8Wnc3It67advDUOlZogZFNlo6lfdQu9bLqP1Q7uxXcwkWiqAguUoeMGCvOOxNWozGICXJk0FBCBduJevQ.auvS9i1y65PLd6Qe.2JV9vXGTGymya3JXrl8vLnLwxP5A7EXEhzWQMUHmdfQ2Sg35n0OckvQ9KegCma6L4qx17ShOei4KJQbpQ29dHXfTxVknPeMQYQ-yKRRNVPyHS5Ve0TbhN91z0099BOBl5iPCeBjmrLzrc1WseZDAeHALM05cD9Inu3t5jBXm9T9tYSQVOaRR5jRKqGbBfrKzcq1rqH-KTJmylbr2X7bxR68vnbpSmC_jojEyJp9jWNyxQJ-tFy3SPINh0kgrhhdrDvhn_feki1enhiJPfJKBiYVXOfjDbyzN7571EJcd_Yk4e_zQjMu6d8MOqP46M9LUN13kDxFQc-bTkC33fMiRTj5Cc2N5oQLxwznw7fIsVV_pzXHMeWn3RrhwwWaNesDJuGWHETxWdagq0d_QRuBC8Ciw6JlRUj6FwQAhWJIPG9oOn8G2Q8Lpi_nKhv9110WQ-0BYH6DDQDlYYund_kAavXj2hFREkeLC7ibjwiWxeIXfY-ADC5WnOzj2Lg9GZxpZfeo8dj3-OBBHnCu5hmQd5iv70xWVHTyMZKFsQ68FRUBySocjA82uUNhwUBqto8f3wmuCu_YCFRT6TtJGFB_xez8JbJcVhLNfKOhrRWyD--biN7w2eXVyJD5Z8L1-44WZFXqNzD67fkbefFQs_bxhbOUvm9CXZ20tEqH8tnGfdzsvtIbX0020U28sNr9TUA7LDni_zQw_9XTzp5F5O9QBCvHhH18s1MdKbMIhmQ2EDI6xJYOeM5p9ntkWLQGLImPsbm2MmcpmpHzK7tLBRHRls5iRXMtX3ZZlo6n05rD3YJ8zaadhs6xUpKdVxMQVi45d6f-RH7EW8vVQ4uPk2zaMNZZRDDvGb4VI3qVixwHfK4kSPb3ZrEVmrrjKIy4eP0HVlBZLzetPwTs8_aF4aA1vkJk0f_rzdlsOOLnlJ4DbxvkIuzYQ2aTMHhnftg4aPeD7jBgTuK7hkwdARO4gihP6bUh8lfdXot5-aExY6nM9FIHTzhcucUP3uXDJRInKJpzPRAP_4bEYIl0om8cOEh99Bxn4lCbSx3QfRnFut4ZWLNgBIcRoSi91mGn9XT0Nl2gy9gopB7yY1hDO8fLk2mLb7wEhWuXUilTmfM0_GtiehltxYZ_OnwboIB3-idO36AsZYH4h-tkEuDjBL2355erRIG8nKBEe3auGlBpYWgr3r3i-SDYVfdzNUHm8ZDLIKwo5qSXqKBaxXbMWIQcgE9UyLt1mWtJCChxGZ9HnfN7Xoy9772j0uB6GiDB1iZ7Qxi8DupdzMl3Tc__yroBFwdNpX8ACfvLmPOEZrFwJ5CzC17uufPjCw14mgou3rM71WQ22a7KqR098Y20n00R8ZHJCsm9zo62UYIjotzge9K9eusbC-8SXDZY-ROplV7bw83M2jioHc9uTqyd17w5mtLjoXmpjb_xlrFmKkZ8cLan3fi8-Ivt-svtXaPpzhj6ch1kVWQjHjKztZfg3a8e5x0sf6FBJrO5cF0R5Zu_HXManLZrE0Y72Ucs_eCetd3mppeCj98FRW1m48x7eP5G5u6YR5M2ByxXvk3KH2ZEp4zFc3Vb6Q6ttcFtTI5FJJ6wFC-Qr3IdguPL4kn3pLjSbhMReVQH2N3sO1orTJxBsLXOD0sjtv4WC14HXJyqm0pYf6AJE50kBYhM7OwOaB-upAVueDuD30I6LQfv5KBZtH0xuF6iXGKzMvDlvNFDvNVeql2140lCTcflrO8fbGHY4ZSt3B8rMBHVwaGMwTNC5FxE6Y9YTdY9pxxvKnOBA-uK58Upa5LfGdqagsf6QVVfG5E1nxbcFjMr_r_IYMCENvxvTgwr192zWhbAN0BPBVZL7NRvoBzeG35_N1z36EnGUGHKHIo6kucWtYFhQZBeeP9nW42ZQK6k5bq_pgkED60z82xvQVpXM5qzwxYgXPb3lNta6lLORR4_Q9vJtcjlvHOWkUG_oateKq0CUzoPjcqqfInvaYxy6IktepUFJAJkPWcB_xwZVtrpS_x63SMRhHFgn-EW9HqgXh3vsBme5d5JqFI_KMa2tIPptKKaoBFsKyZVMyyw-6r-I2MrTAnU79xOq5Z_eRaps_LyC0UVNSxcnSh0-JC3HliYRHRZkV270tL4qr4poe7lbfyl3ymROxYEmmtXq4UY1WqU_kFvkxGUmeJngGYGOELR8MdmKpCWnxJMGrqadpH3lrePEBGvKJyqtS2-cFkX-IeyBrjsoTWpmnNFzzI12BRj96hQ8skS7gFKI10KOMdFu9ziYqZzk8OqTZvdXlVF5zbcBpzfb1Z-Jkcvo7nkorR1zkWkd6TeNMygUWFKvehtYVZrCVXGatSZWp71D9vFDQz51YsuByxmLdgLxWE_LncOsN8Ilkhh4aeiaYYGXkG4AwYiAGS0p8mk39myj7yZsDB0TCdATDIvJaGnl7MfYXLeuXxqUDrJklQW7LaNmLKLv83fqPAWht0AxSIBNEymgo2d-ioiRjX5cBq7XxAGdV6l-KP2DZcprJU-1FDNrXLxV4Z6Xv03StwvBUPI_wcAkNSA9AzGr6IhKCbnzQxK2_0UkK551285LNZhFV7dl7S97s6H2wyK1UzhWgacoPRIbkrJYJcBqj1GmA3llgxbVH4kamY4nhA5-O3vPJQ31R6G0r5tui9lAh7w_2sQxnyl29Joz9DlsWiM9Ffw1xrg11EbxcrR-wjtwuhVGOEt38NaPB0NSRsBTbgSdxGLK5EpH_WOWkTkRdXLV4DiC-mw0d85d12K6-3FaRoAMn70IPfqW3A65aq7sjIWTHoRrq-VxDxM4uFsL4I_i5TUfLyVcDURcj4H34NvXHb8U0q-ISHw3Q-EAJFCzxuKkbOasfKZWKs9kRMfALB6rFFsmaoYVP3hXgtc_AMZs2NwiqeOjBssaVP89T3cicW6GO7NX-8DCU0W4HmHjfUAlp65WfVOXfesCY55Ol1_AGBEDeKZ9dll6BUKtx6vRcQAEeH6Rf0DLvIX9tHK28Y8riCE15T0kVaQrUNI1soo382p99d_c6dYlyy7iqPbZHgW89fo4OS2SFoWFDTlk8DDJATtTUQ42eFHP1sJZNVQYydgr1Wuouc9ErTY-NdBnxMB1Bw6K0n1A_zU39OAtYuuJlbeBpjV3M5k-UNinU1driTgjh9IRgPils03p3yoWJ9135asGR0-nE_uDM8ZkozXcxqblgoqULEO5ru5KyiZ2rkj0Q7n09cIOyUPxGvzXjtRGh7nsxHYm6dJ7LzdyGx8IYdUmC925qcwOfXr3N8TueOTbBJMMxxcfwZH67RifPsvq-VHsQQr7Bn5P3z98F57HPnISMN3IaufOpaC4k5yqT_OOFEgRd7bKc_SwzOCquONPxEYIbQ602eTvb-n6JUJbrmkWbRKRYi56MkL6xGuJdSRK-JNnfQ2Tbv5gr316jh13on4UfkgiRFRtliI2b3LPDLydbd1jDTRzXsoGYz1QNLREy1z-ls6cCHxxenGbPDW6I3o9JWsmkRm8JLBjciUt0_yeQrk5DS0.iq3L78KB3uFR6n_IKqfmSQ";

        Mockito.when(preAuthService.savePreAuthResponse(preAuth)).thenReturn("PreAuth response pushed to Queue");
        mvc.perform(post("/hcxProvider/response/preauth/on_submit").contentType(MediaType.APPLICATION_JSON).content(preAuth)).andExpect(status().isOk()).andExpect(MockMvcResultMatchers.content().string(containsString("PreAuth response pushed to Queue")));
   }

}